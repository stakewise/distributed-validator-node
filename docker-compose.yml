# Override any defaults specified by `${FOO:-bar}` in `.env` with `FOO=qux`.
# ${VARIABLE:-default} evaluates to default if VARIABLE is unset or empty in the environment.
# ${VARIABLE-default} evaluates to default only if VARIABLE is unset in the environment.

services:
  nethermind:
    image: nethermind/nethermind:${NETHERMIND_VERSION:-1.28.0}
    restart: unless-stopped
    ports:
      - ${NETHERMIND_PORT_P2P:-30303}:30303/tcp # P2P TCP
      - ${NETHERMIND_PORT_P2P:-30303}:30303/udp # P2P UDP
      - ${NETHERMIND_IP_HTTP:-127.0.0.1}:${NETHERMIND_PORT_HTTP:-8545}:8545 # JSON-RPC
      - ${NETHERMIND_IP_ENGINE:-127.0.0.1}:${NETHERMIND_PORT_ENGINE:-8551}:8551 # ENGINE-API
    command: |
      --config=${NETWORK}
      --datadir=data
      --HealthChecks.Enabled=true
      --JsonRpc.Enabled=true
      --JsonRpc.JwtSecretFile="/root/jwt/jwt.hex"
      --JsonRpc.EngineHost=0.0.0.0
      --JsonRpc.EnginePort=8551
      --JsonRpc.Host=0.0.0.0
      --JsonRpc.Port=8545
      --Metrics.Enabled=true
      --Metrics.ExposePort=8008
      --Sync.AncientBodiesBarrier=${NETHERMIND_ANCIENT_BODIES_BARRIER:-0}
      --Sync.AncientReceiptsBarrier=${NETHERMIND_ANCIENT_RECEIPTS_BARRIER:-0}
      --Sync.SnapSync=true
    networks: [dvnode]
    volumes:
      - ./data/nethermind:/nethermind/data
      - ./jwt:/root/jwt

  lighthouse:
    image: sigp/lighthouse:${LIGHTHOUSE_VERSION:-v5.3.0}
    ports:
      - ${LIGHTHOUSE_PORT_P2P:-9000}:9000/tcp # P2P TCP
      - ${LIGHTHOUSE_PORT_P2P:-9000}:9000/udp # P2P UDP
    command: |
      lighthouse bn
      --network=${NETWORK}
      --checkpoint-sync-url=${LIGHTHOUSE_CHECKPOINT_SYNC_URL}
      --execution-endpoint=http://nethermind:8551
      --execution-jwt=/opt/jwt/jwt.hex
      --datadir=/opt/app/beacon/
      --builder=http://mev-boost:18550
      --http
      --http-address=0.0.0.0
      --http-port=5052
      --metrics
      --metrics-address=0.0.0.0
      --metrics-port=5054
      --metrics-allow-origin="*"
    networks: [dvnode]
    volumes:
      - ./data/lighthouse:/opt/app/beacon
      - ./jwt:/opt/jwt
    restart: unless-stopped

  charon:
    image: obolnetwork/charon:${CHARON_VERSION:-v1.1.1}
    environment:
      - CHARON_BEACON_NODE_ENDPOINTS=${CHARON_BEACON_NODE_ENDPOINTS:-http://lighthouse:5052}
      - CHARON_LOG_LEVEL=${CHARON_LOG_LEVEL:-info}
      - CHARON_LOG_FORMAT=${CHARON_LOG_FORMAT:-console}
      - CHARON_P2P_RELAYS=${CHARON_P2P_RELAYS:-https://0.relay.obol.tech,https://1.relay.obol.tech/}
      - CHARON_P2P_EXTERNAL_HOSTNAME=${CHARON_P2P_EXTERNAL_HOSTNAME:-} # Empty default required to avoid warnings.
      - CHARON_P2P_TCP_ADDRESS=0.0.0.0:${CHARON_PORT_P2P_TCP:-3610}
      - CHARON_VALIDATOR_API_ADDRESS=0.0.0.0:3600
      - CHARON_MONITORING_ADDRESS=0.0.0.0:3620
      - CHARON_BUILDER_API=${BUILDER_API_ENABLED:-false}
      - CHARON_FEATURE_SET_ENABLE=${CHARON_FEATURE_SET_ENABLE:-}
    ports:
      - ${CHARON_PORT_P2P_TCP:-3610}:${CHARON_PORT_P2P_TCP:-3610}/tcp # P2P TCP libp2p
    networks: [dvnode]
    volumes:
      - .charon:/opt/charon/.charon
    restart: unless-stopped
    healthcheck:
      test: wget -qO- http://localhost:3620/readyz
  
  sidecar:
    image: europe-west4-docker.pkg.dev/stakewiselabs/public/dvt-operator-sidecar:v0.3.0
    restart: unless-stopped
    user: "1000:1000"
    networks: [dvnode]
    volumes:
      - .charon:/opt/charon/.charon/
    environment:
      NETWORK: ${NETWORK:-holesky}
      RELAYER_ENDPOINT: ${RELAYER_ENDPOINT:-https://holesky-dvt-relayer.stakewise.io}
      RELAYER_TIMEOUT: ${RELAYER_TIMEOUT:-10}
      OBOL_CLUSTER_LOCK_FILE: ${OBOL_CLUSTER_LOCK_FILE:-/opt/charon/.charon/cluster-lock.json}
      POLL_INTERVAL: ${POLL_INTERVAL:-1}
      OBOL_KEYSTORES_DIR: ${OBOL_KEYSTORES_DIR:-/opt/charon/.charon/validator_keys}
      OBOL_NODE_INDEX: ${OBOL_NODE_INDEX:-0}

  lodestar:
    image: chainsafe/lodestar:${LODESTAR_VERSION:-v1.20.2}
    depends_on: [charon]
    entrypoint: /opt/lodestar/run.sh
    networks: [dvnode]
    environment:
      BEACON_NODE_ADDRESS: http://charon:3600
      NETWORK: ${NETWORK}
      BUILDER_API_ENABLED: ${BUILDER_API_ENABLED:-false}
      BUILDER_SELECTION: ${BUILDER_SELECTION:-builderalways}
    volumes:
      - ./lodestar/run.sh:/opt/lodestar/run.sh
      - .charon/validator_keys:/home/charon/validator_keys
      - ./data/lodestar:/opt/data
    restart: unless-stopped

  mev-boost:
    image: ${MEVBOOST_IMAGE:-flashbots/mev-boost}:${MEVBOOST_VERSION:-1.7.0}
    command: |
      -${NETWORK}
      -loglevel=debug
      -addr=0.0.0.0:18550
      -relay-check
      -relays=${MEVBOOST_RELAYS}
    networks: [dvnode]
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:${PROMETHEUS_VERSION:-v2.50.1}
    user: ":"
    networks: [dvnode]
    environment:
      - PROM_REMOTE_WRITE_TOKEN=${PROM_REMOTE_WRITE_TOKEN}
      - SERVICE_OWNER=${SERVICE_OWNER}
    volumes:
      - ./prometheus:/etc/prometheus
      - ./data/prometheus:/prometheus
    entrypoint: /etc/prometheus/run.sh
    restart: unless-stopped

  grafana:
    image: grafana/grafana:${GRAFANA_VERSION:-10.4.2}
    user: ":"
    ports:
      - ${MONITORING_IP_GRAFANA:-0.0.0.0}:${MONITORING_PORT_GRAFANA:-3000}:3000
    networks: [dvnode]
    volumes:
      - ./grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
      - ./grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/datasource.yml
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini:ro
      - ./grafana/dashboards:/etc/dashboards
      - ./data/grafana:/var/lib/grafana
    restart: unless-stopped

networks:
  dvnode:
